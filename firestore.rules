rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Reglas para usuarios
    match /users/{userId} {
      // Permitir lectura si es el propio usuario o admin
      allow read: if request.auth != null && (request.auth.uid == userId || 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN');
      
      // Permitir escritura si es el propio usuario o admin
      allow write: if request.auth != null && 
        (request.auth.uid == userId || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN');
      
      // Permitir creación si es admin (crear usuario) o el propio usuario (completar registro)
      allow create: if request.auth != null && 
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN' ||
         request.auth.uid == userId);
      
      // Permitir actualización de registro pendiente
      allow update: if request.auth != null && 
        (request.auth.uid == userId || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN');
    }
    
    // NUEVA: Colección para usuarios pendientes de registro
    match /pendingUsers/{email} {
      // Permitir lectura pública (necesario para verificar si existe antes de registrarse)
      allow read: if true;
      // Solo admins pueden crear/actualizar/eliminar usuarios pendientes
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN';
    }
    
    // Reglas para ejercicios
    match /exercises/{exerciseId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN';
    }
    
    // Reglas para rutinas de administrador
    match /routines/{routineId} {
      // Permitir lectura a TODOS los usuarios autenticados
      allow read: if request.auth != null;
      
      // Permitir escritura solo a administradores
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN';
    }
    
    // Reglas para rutinas de usuario (NUEVAS)
    match /userRoutines/{routineId} {
      // Permitir lectura si el usuario es el creador o es admin
      allow read: if request.auth != null && 
        (resource.data.createdBy == request.auth.uid || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN');
      
      // Permitir escritura si el usuario es el creador o es admin
      allow write: if request.auth != null && 
        (resource.data.createdBy == request.auth.uid || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN');
      
      // Permitir creación si el usuario está autenticado
      allow create: if request.auth != null && 
        request.resource.data.createdBy == request.auth.uid;
      
      // Permitir actualización si el usuario es el creador
      allow update: if request.auth != null && 
        resource.data.createdBy == request.auth.uid;
      
      // Permitir eliminación si el usuario es el creador
      allow delete: if request.auth != null && 
        resource.data.createdBy == request.auth.uid;
    }
    
    // Reglas para nutrición
    match /nutrition_configs/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /meal_logs/{logId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    match /daily_usage/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Reglas para configuración nutricional temporal (AsyncStorage backup)
    match /temp_nutrition_configs/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /temp_meal_logs/{logId} {
      allow read, write: if request.auth != null && 
        (resource == null || resource.data.userId == request.auth.uid);
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
    }
    
    match /temp_daily_usage/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
} 